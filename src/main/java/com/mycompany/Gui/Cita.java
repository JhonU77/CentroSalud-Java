/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.Gui;

import com.github.lgooddatepicker.components.TimePickerSettings;
import com.github.lgooddatepicker.optionalusertools.TimeVetoPolicy;
import com.mycompany.Modelo.HorasOcupadasVetoPolicy;
import com.mycompany.Modelo.Conexion;
import com.mycompany.Modelo.ConsultaReniec;
import com.mycompany.Modelo.ConsultasSql;
import com.mycompany.Modelo.Paciente;
import com.mycompany.Modelo.SesionUsuario;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.sql.Time;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;


/**
 *
 * @author farro
 */
public class Cita extends javax.swing.JFrame {

    
    /**
     * Creates new form Cita
     */
    public Cita() {
        initComponents();
        cargarCitasEnTabla();
        ConsultasSql.cargarAtenciones(cmbAtencion);
        ConsultasSql.cargarEstablecimiento(cmbEstablecimiento);
        //No permitir fechas pasadas
        dateFechaAtencion.setMinSelectableDate(new Date());
        
        //Limitar horas (06:00 a 18:00)
        timeHoraAtencion.getSettings().setVetoPolicy(new TimeVetoPolicy() {
            @Override
            public boolean isTimeAllowed(LocalTime time) {
                LocalTime min = LocalTime.of(6, 0);
                LocalTime max = LocalTime.of(18, 0);
                return !time.isBefore(min) && !time.isAfter(max);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtApellidoMaternoPaciente = new javax.swing.JTextField();
        txtNombrePaciente = new javax.swing.JTextField();
        txtApellidoPaternoPaciente = new javax.swing.JTextField();
        bttRegistrarCita = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableMostrarCita = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        dateFechaNacimientoPaciente = new com.toedter.calendar.JDateChooser();
        checkMasculino = new javax.swing.JCheckBox();
        checkFemenino = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        bttRegistrarPaciente = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        dateFechaAtencion = new com.toedter.calendar.JDateChooser();
        jLabel15 = new javax.swing.JLabel();
        cmbAtencion = new javax.swing.JComboBox<>();
        cmbEstablecimiento = new javax.swing.JComboBox<>();
        bttLimpiarCampos = new javax.swing.JButton();
        bttBuscarPaciente1 = new javax.swing.JButton();
        bttBuscarPaciente = new javax.swing.JButton();
        txtDniPaciente = new javax.swing.JTextField();
        timeHoraAtencion = new com.github.lgooddatepicker.components.TimePicker();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Citas");
        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 51));
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 0, 50, 30));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 3, 13)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Apellido M:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 120, 80, 20));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 3, 15)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Datos de la Cita");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, -1, 20));

        jLabel4.setText("Establecimiento:");
        jLabel4.setFont(new java.awt.Font("Segoe UI", 3, 13)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 260, 110, 20));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 3, 13)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Nombre:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 80, 60, 20));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 3, 13)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Genero:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 160, 60, 20));
        jPanel1.add(txtApellidoMaternoPaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 120, 110, -1));
        jPanel1.add(txtNombrePaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 80, 100, -1));
        jPanel1.add(txtApellidoPaternoPaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 120, 110, -1));

        bttRegistrarCita.setText("Registrar Cita");
        bttRegistrarCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttRegistrarCitaActionPerformed(evt);
            }
        });
        jPanel1.add(bttRegistrarCita, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 220, 130, -1));

        tableMostrarCita.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Dni Paciente", "Fecha Atencion", "Hora Atencion", "Establecimiento", "Atencion"
            }
        ));
        jScrollPane2.setViewportView(tableMostrarCita);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 640, 180));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 3, 13)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Apellido P:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, 80, 20));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 3, 13)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("Fecha Nacimiento:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 160, 120, 20));
        jPanel1.add(dateFechaNacimientoPaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 160, -1, -1));

        checkMasculino.setForeground(new java.awt.Color(0, 0, 0));
        checkMasculino.setText("M");
        jPanel1.add(checkMasculino, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 160, -1, -1));

        checkFemenino.setForeground(new java.awt.Color(0, 0, 0));
        checkFemenino.setText("F");
        jPanel1.add(checkFemenino, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 160, -1, -1));

        jLabel9.setText("_____________________________________________________________________________________________________________________________________________");
        jLabel9.setFont(new java.awt.Font("Segoe UI", 3, 36)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, -1, -1));

        jLabel10.setText("Dni:");
        jLabel10.setFont(new java.awt.Font("Segoe UI", 3, 13)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, 30, 20));

        jLabel11.setText("Datos del Paciente");
        jLabel11.setFont(new java.awt.Font("Segoe UI", 3, 15)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, 20));

        bttRegistrarPaciente.setText("Registrar Paciente");
        bttRegistrarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttRegistrarPacienteActionPerformed(evt);
            }
        });
        jPanel1.add(bttRegistrarPaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 70, 130, -1));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 3, 13)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 0, 0));
        jLabel12.setText("Descripción de atención:");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 300, 160, 20));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 3, 13)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 0, 0));
        jLabel13.setText("Hora Atención:");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 300, 110, 20));

        dateFechaAtencion.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dateFechaAtencionPropertyChange(evt);
            }
        });
        jPanel1.add(dateFechaAtencion, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 260, 100, -1));

        jLabel15.setFont(new java.awt.Font("Segoe UI", 3, 13)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 0, 0));
        jLabel15.setText("Fecha Atención:");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 260, 110, 20));

        jPanel1.add(cmbAtencion, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 300, 150, -1));

        jPanel1.add(cmbEstablecimiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 260, 160, -1));

        bttLimpiarCampos.setText("Limpiar Campos");
        bttLimpiarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttLimpiarCamposActionPerformed(evt);
            }
        });
        jPanel1.add(bttLimpiarCampos, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 150, 130, -1));

        bttBuscarPaciente1.setText("Buscar Paciente");
        bttBuscarPaciente1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttBuscarPaciente1ActionPerformed(evt);
            }
        });
        jPanel1.add(bttBuscarPaciente1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 110, 130, -1));

        bttBuscarPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Confirm.png"))); // NOI18N
        bttBuscarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttBuscarPacienteActionPerformed(evt);
            }
        });
        jPanel1.add(bttBuscarPaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 80, 30, -1));
        jPanel1.add(txtDniPaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, 90, -1));
        jPanel1.add(timeHoraAtencion, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 300, -1, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bttRegistrarCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttRegistrarCitaActionPerformed
        try {
            // Fecha de registro actual
            Date fechaActual = new Date();
            SimpleDateFormat sdfFecha = new SimpleDateFormat("yyyy-MM-dd");
            String fechaRegistro = sdfFecha.format(fechaActual);

            // Fecha y hora de atención
            if (dateFechaAtencion.getDate() == null) {
                JOptionPane.showMessageDialog(this, "Seleccione la fecha de atención.");
                return;
            }
            String fechaAtencion = sdfFecha.format(dateFechaAtencion.getDate());

            if (timeHoraAtencion.getTime() == null) {
                JOptionPane.showMessageDialog(this, "Seleccione la hora de atención.");
                return;
            }

            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
            String horaAtencion = timeHoraAtencion.getTime().format(formatter);

            if (horaAtencion.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Ingrese la hora de atención.");
                return;
            }

            // Extraer ID_Establecimiento del combo
            String nombreEstablecimiento = cmbEstablecimiento.getSelectedItem().toString();
            int idEstablecimiento = ConsultasSql.obtenerIdEstablecimiento(nombreEstablecimiento);

            // Extraer ID_Atencion del combo
            String nombreAtencion = cmbAtencion.getSelectedItem().toString();
            int idAtencion = ConsultasSql.obtenerIdAtencion(nombreAtencion);

            String dniPaciente = txtDniPaciente.getText().trim();
            if (dniPaciente.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Complete el DNI del paciente.");
                return;
            }

            String correoSesion = SesionUsuario.getCorreoUsuario();
            int idUsuario = ConsultasSql.obtenerIdUsuarioPorCorreo(correoSesion);

            if (idUsuario == -1) {
                JOptionPane.showMessageDialog(this, "No se pudo obtener el ID del usuario.");
                return;
            }

            // Validar que no exista otra cita a esa fecha, hora y establecimiento
            if (ConsultasSql.existeCitaEnFechaHora(fechaAtencion, horaAtencion, idEstablecimiento)) {
                JOptionPane.showMessageDialog(this, "Ya existe una cita registrada en esa fecha y hora para este establecimiento.");
                return;
            }
            
            // Registrar cita
            try (Connection con = Conexion.getConexion()) {
                String sql = "INSERT INTO Cita (FechaRegistro_Cita, FechaAtencion_Cita, HoraAtencion_Cita, ID_Establecimiento, DNI_Paciente, ID_Atencion, ID_Usuario) "
                + "VALUES (?, ?, ?, ?, ?, ?, ?)";

                PreparedStatement ps = con.prepareStatement(sql);
                ps.setString(1, fechaRegistro);
                ps.setString(2, fechaAtencion);
                ps.setString(3, horaAtencion);
                ps.setInt(4, idEstablecimiento);
                ps.setString(5, dniPaciente);
                ps.setInt(6, idAtencion);
                ps.setInt(7, idUsuario);

                int rows = ps.executeUpdate();
                if (rows > 0) {
                    JOptionPane.showMessageDialog(this, "Cita registrada correctamente.");
                    cargarCitasEnTabla();
                    
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo registrar la cita.");
                }

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error al registrar la cita: " + ex.getMessage());
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error general: " + ex.getMessage());
        }
    }//GEN-LAST:event_bttRegistrarCitaActionPerformed

    private void bttRegistrarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttRegistrarPacienteActionPerformed
        String dni = txtDniPaciente.getText().trim();
        String nombres = txtNombrePaciente.getText().trim();
        String apellidoPaterno = txtApellidoPaternoPaciente.getText().trim();
        String apellidoMaterno = txtApellidoMaternoPaciente.getText().trim();

        if (dateFechaNacimientoPaciente.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Selecciona la fecha de nacimiento.");
            return;
        }

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String fechaNacimiento = sdf.format(dateFechaNacimientoPaciente.getDate());

        String genero = "";
        if (checkMasculino.isSelected()) {
            genero = "M";
        } else if (checkFemenino.isSelected()) {
            genero = "F";
        }

        if (dni.isEmpty() || nombres.isEmpty() || apellidoPaterno.isEmpty() || apellidoMaterno.isEmpty() || genero.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Completa todos los campos.");
            return;
        }

        //Verificar si el DNI ya existe usando la clase ConsultasSql
        if (ConsultasSql.dniExiste(dni)) {
            JOptionPane.showMessageDialog(this, "El DNI ya está registrado.");
            return;
        }

        try (Connection con = Conexion.getConexion()) {
            String sql = "INSERT INTO Paciente (DNI_Paciente, Nombres_Paciente, ApellidoPaterno_Paciente, ApellidoMaterno_Paciente, FechaNacimiento_Paciente, Genero_Paciente) "
            + "VALUES (?, ?, ?, ?, ?, ?)";
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, dni);
            ps.setString(2, nombres);
            ps.setString(3, apellidoPaterno);
            ps.setString(4, apellidoMaterno);
            ps.setString(5, fechaNacimiento);
            ps.setString(6, genero);

            int rows = ps.executeUpdate();
            if (rows > 0) {
                JOptionPane.showMessageDialog(this, "Paciente registrado correctamente.");
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo registrar el paciente.");
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error al registrar: " + ex.getMessage());
        }
    }//GEN-LAST:event_bttRegistrarPacienteActionPerformed

    private void bttLimpiarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttLimpiarCamposActionPerformed
        txtDniPaciente.setText("");
        txtNombrePaciente.setText("");
        txtApellidoPaternoPaciente.setText("");
        txtApellidoMaternoPaciente.setText("");
        dateFechaNacimientoPaciente.setDate(null);
        checkMasculino.setSelected(false);
        checkFemenino.setSelected(false);
        txtDniPaciente.requestFocus();
        cmbEstablecimiento.setSelectedIndex(-1);
        cmbAtencion.setSelectedIndex(-1);
        dateFechaAtencion.setDate(null);
        timeHoraAtencion.clear();
    }//GEN-LAST:event_bttLimpiarCamposActionPerformed

    private void bttBuscarPaciente1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttBuscarPaciente1ActionPerformed
        String dni = txtDniPaciente.getText().trim();

        if (dni.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor ingrese un DNI.");
            return;
        }

        ConsultasSql consultas = new ConsultasSql();
        Paciente paciente = consultas.buscarPacientePorDni(dni);

        if (paciente != null) {
            txtNombrePaciente.setText(paciente.getNombres());
            txtApellidoPaternoPaciente.setText(paciente.getApellidoPaterno());
            txtApellidoMaternoPaciente.setText(paciente.getApellidoMaterno());
            dateFechaNacimientoPaciente.setDate(paciente.getFechaNacimiento());

            // Marcar checkbox según género
            if (paciente.getGenero().equalsIgnoreCase("M")) {
                checkMasculino.setSelected(true);
                checkFemenino.setSelected(false);
            } else if (paciente.getGenero().equalsIgnoreCase("F")) {
                checkFemenino.setSelected(true);
                checkMasculino.setSelected(false);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Paciente no registrado.");
        }
    }//GEN-LAST:event_bttBuscarPaciente1ActionPerformed

    private void bttBuscarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttBuscarPacienteActionPerformed
        String dni = txtDniPaciente.getText().trim();

        if (dni.length() != 8) {
            JOptionPane.showMessageDialog(this, "Debe ingresar un DNI válido de 8 dígitos.");
            return;
        }

        ConsultaReniec consultas = new ConsultaReniec();
        String[] datos = consultas.obtenerDatosDni(dni);

        if (datos[0] != null) {
            txtNombrePaciente.setText(datos[0]);
            txtApellidoPaternoPaciente.setText(datos[1]);
            txtApellidoMaternoPaciente.setText(datos[2]);
        } else {
            JOptionPane.showMessageDialog(this, "No se encontró el DNI o hubo un error.");
        }
    }//GEN-LAST:event_bttBuscarPacienteActionPerformed

    private void dateFechaAtencionPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dateFechaAtencionPropertyChange
        if ("date".equals(evt.getPropertyName())) {
            Date fechaSeleccionada = dateFechaAtencion.getDate();
            if (fechaSeleccionada != null) {
                actualizarHorasDisponibles(fechaSeleccionada);
            }
        }
    }//GEN-LAST:event_dateFechaAtencionPropertyChange

    private void actualizarHorasDisponibles(Date fechaSeleccionada) {
        int idEstablecimiento = obtenerIdEstablecimiento();
        List<LocalTime> horasOcupadas = ConsultasSql.obtenerHorasOcupadas(fechaSeleccionada, idEstablecimiento);

        HorasOcupadasVetoPolicy policy = new HorasOcupadasVetoPolicy(horasOcupadas);
        timeHoraAtencion.getSettings().setVetoPolicy(policy);
    }
    
    private int obtenerIdEstablecimiento() {
        String nombreEstablecimiento = cmbEstablecimiento.getSelectedItem().toString();
        return ConsultasSql.obtenerIdEstablecimiento(nombreEstablecimiento);
    }
    
    private void cargarCitasEnTabla() {
        DefaultTableModel modelo = (DefaultTableModel) tableMostrarCita.getModel();
        modelo.setRowCount(0);

        String sql = "SELECT c.DNI_Paciente, c.DNI_Personal, c.FechaAtencion_Cita, c.HoraAtencion_Cita, " +
                     "e.Nombre_Establecimiento, a.Desc_Atencion " +
                     "FROM Cita c " +
                     "INNER JOIN Establecimiento e ON c.ID_Establecimiento = e.ID_Establecimiento " +
                     "INNER JOIN Atencion a ON c.ID_Atencion = a.ID_Atencion " +
                     "ORDER BY c.FechaAtencion_Cita DESC";

        try (Connection con = Conexion.getConexion();
             PreparedStatement ps = con.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {

            while (rs.next()) {
                String dniPaciente = rs.getString("DNI_Paciente");
                Date fechaAtencion = rs.getDate("FechaAtencion_Cita");

                Time horaAtencionSQL = rs.getTime("HoraAtencion_Cita");
                String horaAtencion = new SimpleDateFormat("HH:mm").format(horaAtencionSQL);

                String establecimiento = rs.getString("Nombre_Establecimiento");
                String atencion = rs.getString("Desc_Atencion");

                Object[] fila = {dniPaciente, fechaAtencion, horaAtencion, establecimiento, atencion};

                modelo.addRow(fila);
            }


        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar citas: " + e.getMessage());
        }
    }
    
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cita().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bttBuscarPaciente;
    private javax.swing.JButton bttBuscarPaciente1;
    private javax.swing.JButton bttLimpiarCampos;
    private javax.swing.JButton bttRegistrarCita;
    private javax.swing.JButton bttRegistrarPaciente;
    private javax.swing.JCheckBox checkFemenino;
    private javax.swing.JCheckBox checkMasculino;
    private javax.swing.JComboBox<String> cmbAtencion;
    private javax.swing.JComboBox<String> cmbEstablecimiento;
    private com.toedter.calendar.JDateChooser dateFechaAtencion;
    private com.toedter.calendar.JDateChooser dateFechaNacimientoPaciente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableMostrarCita;
    private com.github.lgooddatepicker.components.TimePicker timeHoraAtencion;
    private javax.swing.JTextField txtApellidoMaternoPaciente;
    private javax.swing.JTextField txtApellidoPaternoPaciente;
    private javax.swing.JTextField txtDniPaciente;
    private javax.swing.JTextField txtNombrePaciente;
    // End of variables declaration//GEN-END:variables
}
